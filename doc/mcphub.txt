*mcphub.txt*  MCP Hub integration for Neovim

Author:   Ravitemer
Homepage: https://github.com/ravitemer/mcphub.nvim
License:  MIT

==============================================================================
CONTENTS                                                    *mcphub-contents*

    Introduction ................ |mcphub-introduction|
    Requirements ................ |mcphub-requirements|
    Installation ................ |mcphub-installation|
    Usage ...................... |mcphub-usage|
    Extensions ................. |mcphub-extensions|
    Troubleshooting ............ |mcphub-troubleshooting|
    Architecture ............... |mcphub-architecture|

==============================================================================
INTRODUCTION                                               *mcphub-introduction*

MCPHub.nvim integrates MCP (Model Context Protocol) servers into your workflow.
Configure and manage MCP servers through a centralized config file while providing
an intuitive UI for testing tools and resources. Perfect for LLM integration,
offering both programmatic API access and interactive testing capabilities.

Features:~
- Simple single-command interface (|:MCPHub|)
- Interactive UI for testing tools and resources
- Automatic server lifecycle management across multiple Neovim instances
- Smart shutdown handling with configurable delay
- Both sync and async operations supported
- Clean client registration/cleanup
- Comprehensive API for tool and resource access

==============================================================================
REQUIREMENTS                                               *mcphub-requirements*

- Neovim >= 0.8.0
- Node.js >= 18.0.0
- plenary.nvim (for HTTP requests)
- mcp-hub (automatically installed via build command)

==============================================================================
INSTALLATION                                               *mcphub-installation*

Using lazy.nvim: >lua
    {
        "ravitemer/mcphub.nvim",
        dependencies = {
            "nvim-lua/plenary.nvim",  -- Required for Job and HTTP requests
        },
        build = "npm install -g mcp-hub@latest",
        config = function()
            require("mcphub").setup({
                -- Required options
                port = 3000,  -- Port for MCP Hub server
                config = vim.fn.expand("~/mcpservers.json"),

                -- Optional options
                on_ready = function(hub)
                    -- Called when hub is ready
                end,
                on_error = function(err)
                    -- Called on errors
                end,
                shutdown_delay = 0, -- Wait 0ms before shutting down server after last client exits
                log = {
                    level = vim.log.levels.WARN,
                    to_file = false,
                    file_path = nil,
                    prefix = "MCPHub"
                },
            })
        end
    }
<
==============================================================================
USAGE                                                      *mcphub-usage*

Commands:                                                  *mcphub-commands*
:MCPHub                             Open the MCPHub UI window

API Usage:                                                 *mcphub-api*
>lua
    -- Get hub instance after setup
    local mcphub = require("mcphub")

    -- Option 1: Use on_ready callback
    mcphub.setup({
        port = 3000,
        config = vim.fn.expand("~/mcpservers.json"),
        on_ready = function(hub)
            -- Hub is ready to use here
        end
    })

    -- Option 2: Get hub instance directly
    local hub = mcphub.get_hub_instance()
<

Core Functions:                                            *mcphub-functions*
>lua
    -- Call a tool (sync)
    local response, err = hub:call_tool("server-name", "tool-name", {
        param1 = "value1"
    }, {
        return_text = true -- Parse response to LLM-suitable text
    })

    -- Call a tool (async)
    hub:call_tool("server-name", "tool-name", {
        param1 = "value1"
    }, {
        return_text = true,
        callback = function(response, err)
            -- Use response
        end
    })

    -- Access resource (sync)
    local response, err = hub:access_resource("server-name", "resource://uri", {
        return_text = true
    })

    -- Get prompt helpers for system prompts
    local prompts = hub:get_prompts({
        use_mcp_tool_example = "...",
        access_mcp_resource_example = "..."
    })
<

==============================================================================
EXTENSIONS                                                 *mcphub-extensions*

MCPHub.nvim provides extensions that integrate with popular Neovim chat plugins.
These extensions allow you to use MCP tools and resources directly within your
chat interfaces.

CodeCompanion Integration:~
>lua
    tools = {
        ["mcp"] = {
            callback = require("mcphub.extensions.codecompanion"),
            description = "Call tools and resources from the MCP Servers",
            opts = {
                user_approval = true,
            },
        },
    }
<
See extensions/ folder for more examples and implementation details.

==============================================================================
TROUBLESHOOTING                                           *mcphub-troubleshooting*

1. Environment Requirements~
   Most MCP servers require these to be installed:
>sh
   node --version    # Should be >= 18.0.0
   python --version  # Should be installed
   uvx --version    # Should be installed

   # Most server commands use these - verify they work:
   npx --version
   uvx --version
<

2. Port Issues~
   If you get `EADDRINUSE` error:
>sh
   lsof -i :[port]  # Find process ID
   kill [pid]       # Kill the process
<

3. Configuration File~
   - Ensure config path is absolute
   - Verify file contains valid JSON with `mcpServers` key
   - Check server-specific configuration requirements
   - Validate server command and args are correct for your system

4. MCP Server Issues~
   Ways to validate server configurations:
   - MCP Inspector: GUI tool for verifying server operation
     https://github.com/modelcontextprotocol/inspector
   - mcp-cli: Command-line tool for testing with config files
     https://github.com/wong2/mcp-cli
   - Check server logs in MCPHub UI (Logs view)
   - Test tools and resources individually to isolate issues

Need Help?~
- Create a Discussion: https://github.com/ravitemer/mcphub.nvim/discussions
- Open an Issue: https://github.com/ravitemer/mcphub.nvim/issues

==============================================================================
ARCHITECTURE                                               *mcphub-architecture*

MCPHub.nvim uses an Express server to manage MCP servers and handle client
requests:

Setup Process:~
1. When setup() is called:
   - Checks for mcp-hub command installation
   - Verifies version compatibility
   - Starts mcp-hub with provided port and config file
   - Creates Express server at localhost:[port]

2. After successful setup:
   - Calls on_ready callback with hub instance
   - Hub instance provides REST API interface
   - UI updates in real-time via :MCPHub command

3. Express Server Features:
   - Manages MCP server configurations
   - Handles tool execution requests
   - Provides resource access
   - Multi-client support
   - Automatic cleanup

4. When Neovim instances close:
   - Unregister as clients
   - Last client triggers shutdown timer
   - Server waits shutdown_delay seconds before stopping
   - Timer cancels if new client connects

Benefits:~
- Consistent server management
- Real-time status monitoring
- Efficient resource usage
- Clean process handling
- Multiple client support

For diagrams illustrating the architecture, visit:
https://github.com/ravitemer/mcphub.nvim#architecture-flows

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
