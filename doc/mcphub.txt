*mcphub.txt*  MCP Hub integration for Neovim

Author:   Ravitemer
License:  MIT
Homepage: https://github.com/ravitemer/mcphub.nvim

==============================================================================
                                                        *mcphub*

A powerful Neovim plugin for managing MCP (Model Context Protocol) servers
through mcp-hub.

FEATURES                                                *mcphub-features*

- Simple single-command interface (:MCPHub)
- Automatic server lifecycle management
- Async operations - no blocking
- Clean client registration/cleanup
- Smart process handling
- Configurable logging support

REQUIREMENTS                                            *mcphub-requirements*

- Neovim >= 0.8.0
- plenary.nvim (for HTTP requests)
- Node.js >= 18.0.0 (for mcp-hub)
- mcp-hub

INSTALLATION                                            *mcphub-installation*

Using lazy.nvim: >

    {
        "ravitemer/mcphub.nvim",
        dependencies = {
            "nvim-lua/plenary.nvim",
        },
        build = "npm install -g mcp-hub@latest",
        config = function()
            require("mcphub").setup({
                port = 3000,
                config = vim.fn.expand("~/.config/mcp-hub/config.json"),
                log = {
                    level = vim.log.levels.WARN,
                    to_file = false,
                    file_path = nil,
                    prefix = "MCPHub"
                },
                on_ready = function(hub)
                    -- Called when hub is ready
                end,
                on_error = function(err)
                    -- Called on errors
                end
            })
        end
    }
<
USAGE                                                   *mcphub-usage*

API:                                                   *mcphub-api*
>
    -- Setup plugin with logging and callbacks
    require("mcphub").setup({
        port = 3000,
        config = vim.fn.expand("~/.config/mcp-hub/config.json"),
        on_ready = function(hub)
            -- Ready to use MCP features
            hub:get_servers(function(servers)
                -- Use servers data
            end)
        end,
        on_error = function(err)
            -- Error will be automatically logged
        end
    })

    -- Get instance for API access (all methods are async)
    local hub = require("mcphub").get_hub_instance()
<
AVAILABLE METHODS                                       *mcphub-methods*

hub:call_tool({server}, {tool}, {args}, {callback})    *mcphub.call_tool()*
    Call a tool on an MCP server

hub:access_resource({server}, {uri}, {callback})       *mcphub.access_resource()*
    Access a resource from an MCP server

hub:get_status({callback})                             *mcphub.get_status()*
    Get current server status

hub:get_servers({callback})                            *mcphub.get_servers()*
    Get list of connected servers

hub:get_server_info({name}, {callback})                *mcphub.get_server_info()*
    Get information about a specific server

hub:check_server({callback})                           *mcphub.check_server()*
    Check if server is running

hub:is_ready()                                         *mcphub.is_ready()*
    Returns boolean (sync, safe to call)

hub:display_status()                                   *mcphub.display_status()*
    Shows UI with current status

LOGGING                                                *mcphub-logging*

Configuration options: >
    {
        level = vim.log.levels.WARN,  -- Log level threshold
        to_file = false,              -- Enable file logging
        file_path = nil,              -- Path to log file
        prefix = "MCPHub"             -- Prefix for log messages
    }
<
TROUBLESHOOTING                                        *mcphub-troubleshooting*

Server Won't Start~
- Check if port is available
- Verify mcp-hub installation
- Check config file path
- Enable DEBUG log level for detailed output
- Check log file if file logging enabled

Connection Issues~
- Ensure server is running
- Check port configuration
- Verify client registration
- Monitor log output

Status Shows Not Ready~
- Check server health
- Verify connection state
- Check error callbacks
- Review logs for startup sequence
- Check API health endpoint

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
